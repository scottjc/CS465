package Project1;

import java.util.Arrays;

public class AES {

	private static boolean debug = false;
	public byte[] rcon = { (byte) 0x00, // Rcon[] is 1-based, so the first entry is just a place holder of 00000000
			(byte) 0x01, (byte) 0x02, (byte) 0x04, (byte) 0x08, 
			(byte) 0x10, (byte) 0x20, (byte) 0x40, (byte) 0x80, 
			(byte) 0x1B, (byte) 0x36, (byte) 0x6C, (byte) 0xD8, 
			(byte) 0xAB, (byte) 0x4D, (byte) 0x9A, (byte) 0x2F, 
			(byte) 0x5E, (byte) 0xBC, (byte) 0x63, (byte) 0xC6, 
			(byte) 0x97, (byte) 0x35, (byte) 0x6A, (byte) 0xD4, 
			(byte) 0xB3, (byte) 0x7D, (byte) 0xFA, (byte) 0xEF, 
			(byte) 0xC5, (byte) 0x91, (byte) 0x39, (byte) 0x72, 
			(byte) 0xE4, (byte) 0xD3, (byte) 0xBD, (byte) 0x61, 
			(byte) 0xC2, (byte) 0x9F, (byte) 0x25, (byte) 0x4A, 
			(byte) 0x94, (byte) 0x33, (byte) 0x66, (byte) 0xCC, 
			(byte) 0x83, (byte) 0x1D, (byte) 0x3A, (byte) 0x74, 
			(byte) 0xE8, (byte) 0xCB, (byte) 0x8D};

	//used in our first algorithm.
	public byte[][] Sbox = {
			{ (byte)  0x63, (byte)  0x7c, (byte)  0x77, (byte)  0x7b, (byte)  0xf2, (byte)  0x6b, (byte)  0x6f, (byte)  0xc5, (byte)  0x30, (byte)  0x01, (byte)  0x67, (byte)  0x2b, (byte)  0xfe, (byte)  0xd7, (byte)  0xab, (byte)  0x76 } ,
			{ (byte)  0xca, (byte)  0x82, (byte)  0xc9, (byte)  0x7d, (byte)  0xfa, (byte)  0x59, (byte)  0x47, (byte)  0xf0, (byte)  0xad, (byte)  0xd4, (byte)  0xa2, (byte)  0xaf, (byte)  0x9c, (byte)  0xa4, (byte)  0x72, (byte)  0xc0 } ,
			{ (byte)  0xb7, (byte)  0xfd, (byte)  0x93, (byte)  0x26, (byte)  0x36, (byte)  0x3f, (byte)  0xf7, (byte)  0xcc, (byte)  0x34, (byte)  0xa5, (byte)  0xe5, (byte)  0xf1, (byte)  0x71, (byte)  0xd8, (byte)  0x31, (byte)  0x15 } ,
			{ (byte)  0x04, (byte)  0xc7, (byte)  0x23, (byte)  0xc3, (byte)  0x18, (byte)  0x96, (byte)  0x05, (byte)  0x9a, (byte)  0x07, (byte)  0x12, (byte)  0x80, (byte)  0xe2, (byte)  0xeb, (byte)  0x27, (byte)  0xb2, (byte)  0x75 } ,
			{ (byte)  0x09, (byte)  0x83, (byte)  0x2c, (byte)  0x1a, (byte)  0x1b, (byte)  0x6e, (byte)  0x5a, (byte)  0xa0, (byte)  0x52, (byte)  0x3b, (byte)  0xd6, (byte)  0xb3, (byte)  0x29, (byte)  0xe3, (byte)  0x2f, (byte)  0x84 } ,
			{ (byte)  0x53, (byte)  0xd1, (byte)  0x00, (byte)  0xed, (byte)  0x20, (byte)  0xfc, (byte)  0xb1, (byte)  0x5b, (byte)  0x6a, (byte)  0xcb, (byte)  0xbe, (byte)  0x39, (byte)  0x4a, (byte)  0x4c, (byte)  0x58, (byte)  0xcf } ,
			{ (byte)  0xd0, (byte)  0xef, (byte)  0xaa, (byte)  0xfb, (byte)  0x43, (byte)  0x4d, (byte)  0x33, (byte)  0x85, (byte)  0x45, (byte)  0xf9, (byte)  0x02, (byte)  0x7f, (byte)  0x50, (byte)  0x3c, (byte)  0x9f, (byte)  0xa8 } ,
			{ (byte)  0x51, (byte)  0xa3, (byte)  0x40, (byte)  0x8f, (byte)  0x92, (byte)  0x9d, (byte)  0x38, (byte)  0xf5, (byte)  0xbc, (byte)  0xb6, (byte)  0xda, (byte)  0x21, (byte)  0x10, (byte)  0xff, (byte)  0xf3, (byte)  0xd2 } ,
			{ (byte)  0xcd, (byte)  0x0c, (byte)  0x13, (byte)  0xec, (byte)  0x5f, (byte)  0x97, (byte)  0x44, (byte)  0x17, (byte)  0xc4, (byte)  0xa7, (byte)  0x7e, (byte)  0x3d, (byte)  0x64, (byte)  0x5d, (byte)  0x19, (byte)  0x73 } ,
			{ (byte)  0x60, (byte)  0x81, (byte)  0x4f, (byte)  0xdc, (byte)  0x22, (byte)  0x2a, (byte)  0x90, (byte)  0x88, (byte)  0x46, (byte)  0xee, (byte)  0xb8, (byte)  0x14, (byte)  0xde, (byte)  0x5e, (byte)  0x0b, (byte)  0xdb } ,
			{ (byte)  0xe0, (byte)  0x32, (byte)  0x3a, (byte)  0x0a, (byte)  0x49, (byte)  0x06, (byte)  0x24, (byte)  0x5c, (byte)  0xc2, (byte)  0xd3, (byte)  0xac, (byte)  0x62, (byte)  0x91, (byte)  0x95, (byte)  0xe4, (byte)  0x79 } ,
			{ (byte)  0xe7, (byte)  0xc8, (byte)  0x37, (byte)  0x6d, (byte)  0x8d, (byte)  0xd5, (byte)  0x4e, (byte)  0xa9, (byte)  0x6c, (byte)  0x56, (byte)  0xf4, (byte)  0xea, (byte)  0x65, (byte)  0x7a, (byte)  0xae, (byte)  0x08 } ,
			{ (byte)  0xba, (byte)  0x78, (byte)  0x25, (byte)  0x2e, (byte)  0x1c, (byte)  0xa6, (byte)  0xb4, (byte)  0xc6, (byte)  0xe8, (byte)  0xdd, (byte)  0x74, (byte)  0x1f, (byte)  0x4b, (byte)  0xbd, (byte)  0x8b, (byte)  0x8a } ,
			{ (byte)  0x70, (byte)  0x3e, (byte)  0xb5, (byte)  0x66, (byte)  0x48, (byte)  0x03, (byte)  0xf6, (byte)  0x0e, (byte)  0x61, (byte)  0x35, (byte)  0x57, (byte)  0xb9, (byte)  0x86, (byte)  0xc1, (byte)  0x1d, (byte)  0x9e } ,
			{ (byte)  0xe1, (byte)  0xf8, (byte)  0x98, (byte)  0x11, (byte)  0x69, (byte)  0xd9, (byte)  0x8e, (byte)  0x94, (byte)  0x9b, (byte)  0x1e, (byte)  0x87, (byte)  0xe9, (byte)  0xce, (byte)  0x55, (byte)  0x28, (byte)  0xdf } ,
			{ (byte)  0x8c, (byte)  0xa1, (byte)  0x89, (byte)  0x0d, (byte)  0xbf, (byte)  0xe6, (byte)  0x42, (byte)  0x68, (byte)  0x41, (byte)  0x99, (byte)  0x2d, (byte)  0x0f, (byte)  0xb0, (byte)  0x54, (byte)  0xbb, (byte)  0x16 }
	}; 

	public byte[][] iSbox = {
			{ (byte) 0x52, (byte) 0x09, (byte) 0x6a, (byte) 0xd5, (byte) 0x30, (byte) 0x36, (byte) 0xa5, (byte) 0x38, (byte) 0xbf, (byte) 0x40, (byte) 0xa3, (byte) 0x9e, (byte) 0x81, (byte) 0xf3, (byte) 0xd7, (byte) 0xfb } ,
			{ (byte) 0x7c, (byte) 0xe3, (byte) 0x39, (byte) 0x82, (byte) 0x9b, (byte) 0x2f, (byte) 0xff, (byte) 0x87, (byte) 0x34, (byte) 0x8e, (byte) 0x43, (byte) 0x44, (byte) 0xc4, (byte) 0xde, (byte) 0xe9, (byte) 0xcb } ,
			{ (byte) 0x54, (byte) 0x7b, (byte) 0x94, (byte) 0x32, (byte) 0xa6, (byte) 0xc2, (byte) 0x23, (byte) 0x3d, (byte) 0xee, (byte) 0x4c, (byte) 0x95, (byte) 0x0b, (byte) 0x42, (byte) 0xfa, (byte) 0xc3, (byte) 0x4e } ,
			{ (byte) 0x08, (byte) 0x2e, (byte) 0xa1, (byte) 0x66, (byte) 0x28, (byte) 0xd9, (byte) 0x24, (byte) 0xb2, (byte) 0x76, (byte) 0x5b, (byte) 0xa2, (byte) 0x49, (byte) 0x6d, (byte) 0x8b, (byte) 0xd1, (byte) 0x25 } ,
			{ (byte) 0x72, (byte) 0xf8, (byte) 0xf6, (byte) 0x64, (byte) 0x86, (byte) 0x68, (byte) 0x98, (byte) 0x16, (byte) 0xd4, (byte) 0xa4, (byte) 0x5c, (byte) 0xcc, (byte) 0x5d, (byte) 0x65, (byte) 0xb6, (byte) 0x92 } ,
			{ (byte) 0x6c, (byte) 0x70, (byte) 0x48, (byte) 0x50, (byte) 0xfd, (byte) 0xed, (byte) 0xb9, (byte) 0xda, (byte) 0x5e, (byte) 0x15, (byte) 0x46, (byte) 0x57, (byte) 0xa7, (byte) 0x8d, (byte) 0x9d, (byte) 0x84 } ,
			{ (byte) 0x90, (byte) 0xd8, (byte) 0xab, (byte) 0x00, (byte) 0x8c, (byte) 0xbc, (byte) 0xd3, (byte) 0x0a, (byte) 0xf7, (byte) 0xe4, (byte) 0x58, (byte) 0x05, (byte) 0xb8, (byte) 0xb3, (byte) 0x45, (byte) 0x06 } ,
			{ (byte) 0xd0, (byte) 0x2c, (byte) 0x1e, (byte) 0x8f, (byte) 0xca, (byte) 0x3f, (byte) 0x0f, (byte) 0x02, (byte) 0xc1, (byte) 0xaf, (byte) 0xbd, (byte) 0x03, (byte) 0x01, (byte) 0x13, (byte) 0x8a, (byte) 0x6b } ,
			{ (byte) 0x3a, (byte) 0x91, (byte) 0x11, (byte) 0x41, (byte) 0x4f, (byte) 0x67, (byte) 0xdc, (byte) 0xea, (byte) 0x97, (byte) 0xf2, (byte) 0xcf, (byte) 0xce, (byte) 0xf0, (byte) 0xb4, (byte) 0xe6, (byte) 0x73 } ,
			{ (byte) 0x96, (byte) 0xac, (byte) 0x74, (byte) 0x22, (byte) 0xe7, (byte) 0xad, (byte) 0x35, (byte) 0x85, (byte) 0xe2, (byte) 0xf9, (byte) 0x37, (byte) 0xe8, (byte) 0x1c, (byte) 0x75, (byte) 0xdf, (byte) 0x6e } ,
			{ (byte) 0x47, (byte) 0xf1, (byte) 0x1a, (byte) 0x71, (byte) 0x1d, (byte) 0x29, (byte) 0xc5, (byte) 0x89, (byte) 0x6f, (byte) 0xb7, (byte) 0x62, (byte) 0x0e, (byte) 0xaa, (byte) 0x18, (byte) 0xbe, (byte) 0x1b } ,
			{ (byte) 0xfc, (byte) 0x56, (byte) 0x3e, (byte) 0x4b, (byte) 0xc6, (byte) 0xd2, (byte) 0x79, (byte) 0x20, (byte) 0x9a, (byte) 0xdb, (byte) 0xc0, (byte) 0xfe, (byte) 0x78, (byte) 0xcd, (byte) 0x5a, (byte) 0xf4 } ,
			{ (byte) 0x1f, (byte) 0xdd, (byte) 0xa8, (byte) 0x33, (byte) 0x88, (byte) 0x07, (byte) 0xc7, (byte) 0x31, (byte) 0xb1, (byte) 0x12, (byte) 0x10, (byte) 0x59, (byte) 0x27, (byte) 0x80, (byte) 0xec, (byte) 0x5f } ,
			{ (byte) 0x60, (byte) 0x51, (byte) 0x7f, (byte) 0xa9, (byte) 0x19, (byte) 0xb5, (byte) 0x4a, (byte) 0x0d, (byte) 0x2d, (byte) 0xe5, (byte) 0x7a, (byte) 0x9f, (byte) 0x93, (byte) 0xc9, (byte) 0x9c, (byte) 0xef } ,
			{ (byte) 0xa0, (byte) 0xe0, (byte) 0x3b, (byte) 0x4d, (byte) 0xae, (byte) 0x2a, (byte) 0xf5, (byte) 0xb0, (byte) 0xc8, (byte) 0xeb, (byte) 0xbb, (byte) 0x3c, (byte) 0x83, (byte) 0x53, (byte) 0x99, (byte) 0x61 } ,
			{ (byte) 0x17, (byte) 0x2b, (byte) 0x04, (byte) 0x7e, (byte) 0xba, (byte) 0x77, (byte) 0xd6, (byte) 0x26, (byte) 0xe1, (byte) 0x69, (byte) 0x14, (byte) 0x63, (byte) 0x55, (byte) 0x21, (byte) 0x0c, (byte) 0x7d }
	};

	public static void main(String[] args) 
	{
		String inputString =  "00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff";
		String inputString2 = "8e a2 b7 ca 51 67 45 bf ea fc 49 90 4b 49 60 89";
		String keyString = 	  "00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f";
		
//		String inputString =  "00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff";
//		String keyString  =   "00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f";
//		String inputString2 = "69 c4 e0 d8 6a 7b 04 30 d8 cd b7 80 70 b4 c5 5a";
		
		AES aes = new AES();
		aes.encode(AES.stringToBytes(inputString), AES.stringToBytes(keyString));
		aes.decode(AES.stringToBytes(inputString2), AES.stringToBytes(keyString));
		

	}

	//encrypt the message
	public void encode(byte[] infoArray, byte[] keyArray)
	{
		//function1
		
		//function2
		//funtion3
		//function4
		
		//for(int i = 0; )
		
	}

	//decrypt the message
	public void decode(byte[] infoArray, byte[] keyArray)
	{
		
	}


	//function 1
	private byte[][] subBytes(byte[][] info)
	{
		//do a double for loop and substitute all of the values.
		return info;
	}
	
	//function 2
	private byte[][] shiftRows(byte[][] info)
	{
//		byte row2 = info[0][1]; //shift row 2
//		for(int i = 0; i < 3; i++)
//			info[i][1] = info[i + 1][1];
//		info[3][1] = row2;
//		byte row3a = info[0][2]; // shift row 3
//		byte row3b = info[1][2];
//		info[0][2] = info[2][2];
//		info[1][2] = info[3][2];
//		info[2][2] = row3a;
//		info[3][2] = row3b;
//		byte row4 = info[3][3]; // shift row 4
//		for(int i = 3; i > 0; i--)
//			info[i][3] = info[i - 1][3];
//		info[0][3] = row4;
		return info;
	}
	
	//function 3
	private byte[][] mixColumns(byte[][] info)
	{
		byte[] hex = { 0x00, 0x01, 0x02, 0x03 };
		for(int i = 0; i < 4; i++){
			byte[] col = info[i];
			byte[] newCol = new byte[4];
			newCol[0] = (byte) (ffMult(hex[2], col[0]) ^ ffMult(hex[3], col[1]) ^ ffMult(hex[1], col[2]) ^ ffMult(hex[1], col[3]));
			newCol[1] = (byte) (ffMult(hex[1], col[0]) ^ ffMult(hex[2], col[1]) ^ ffMult(hex[3], col[2]) ^ ffMult(hex[1], col[3]));
			newCol[2] = (byte) (ffMult(hex[1], col[0]) ^ ffMult(hex[1], col[1]) ^ ffMult(hex[2], col[2]) ^ ffMult(hex[3], col[3]));
			newCol[3] = (byte) (ffMult(hex[3], col[0]) ^ ffMult(hex[1], col[1]) ^ ffMult(hex[1], col[2]) ^ ffMult(hex[2], col[3]));
			info[i] =  newCol;
		}
		return info;
	}

	//function 3.5
	private byte ffMult(byte val1, byte val2)
	{
		byte temp = val2;
		byte total = 0x00;
		for(int i = 0; i < 8; i++){
			if(((val1 >> (i))& 0x01) == 0x01)
				total ^= temp;
			temp = (((temp & 0x80) == 0x80)? (byte) ((temp << 1) ^ 0x1B): (byte) (temp << 1));
		}
		return (byte)total;
	}

	//Function 4
	private byte[][] addRoundKey(byte[][] info, byte[][] key)
	{
//		for(int i = 0; i < info.length; i++)
//			for(int j = 0; j < info[0].length; j++)
//				info[i][j] ^= key[i][j];
		return info;
	}
	
	//turn the inputs into bytes so we can use em
	public static byte[] stringToBytes(String input)
	{
		String[] parts = input.split(" ");
		byte[] output = new byte[parts.length];
		for(int i = 0; i < parts.length; i++)
		{
			output[i] = (byte)Integer.parseInt(parts[i], 16);//16 is for hex
			//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt
		}
		return output;
	}

//	public static String byteArrayToString(byte[] bytes)
	{
//		String result = "";
//		for(int i = 0; i < bytes.length; i++){
//			if(i != 0)
//				result += " ";
//			result += String.format("%02x", bytes[i]);
//		}
//		return result;
	}
}