package Project1;

import java.util.Arrays;

public class AES {

	private static boolean debug = false;

	public static void main(String[] args) 
	{
//		test128();
//		test192();
		test256();
		//		new AES().test();
	}

	public static void testExample()
	{
		String inputString = "32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 07 34";
		String keyString =   "2b 7e 15 16 28 ae d2 a6 ab f7 15 88 09 cf 4f 3c";
		new AES().encode(AES.stringToBytes(inputString), AES.stringToBytes(keyString));
	}

	public static void test128()
	{
		String inputString =  "00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff";
		String keyString  =   "00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f";
		String inputString2 = "69 c4 e0 d8 6a 7b 04 30 d8 cd b7 80 70 b4 c5 5a";
		//		String keyString2 =   "13 11 1d 7f e3 94 4a 17 f3 07 a7 8b 4d 2b 30 c5";
		AES aes = new AES();
		aes.encode(AES.stringToBytes(inputString), AES.stringToBytes(keyString));
		aes.decode(AES.stringToBytes(inputString2), AES.stringToBytes(keyString));
	}

	public static void test192()
	{
		String inputString =  "00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff";
		String inputString2 = "dd a9 7c a4 86 4c df e0 6e af 70 a0 ec 0d 71 91";
		String keyString =    "00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17";	
		AES aes = new AES();
		aes.encode(AES.stringToBytes(inputString), AES.stringToBytes(keyString));
		aes.decode(AES.stringToBytes(inputString2), AES.stringToBytes(keyString));
	}

	public static void test256()
	{
		String inputString =  "00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff";
		String inputString2 = "8e a2 b7 ca 51 67 45 bf ea fc 49 90 4b 49 60 89";
		String keyString = 	  "00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f";
		AES aes = new AES();
		aes.encode(AES.stringToBytes(inputString), AES.stringToBytes(keyString));
		aes.decode(AES.stringToBytes(inputString2), AES.stringToBytes(keyString));
	}

	public void test()
	{
		int value1 = 0xb3;
		int value2 = 0x00;
		int result = (value1 ^ value2);
		System.out.println(String.format("0x%02x ^ 0x%02x --> 0x%02x", value1, value2, result));

		String inputString =  "00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff";
		byte[][] block = makeBlock(AES.stringToBytes(inputString));
		printBlock(block);
		block = ishiftRows(block);
		printBlock(block);

	}

	public void encode(byte[] stateArray, byte[] keyArray)
	{
		byte[][] state = makeBlock(stateArray);
		byte[][] allKeys = expandKeys(keyArray);
		byte[][] key = getKey(0, allKeys);
		int rounds = getRounds(keyArray.length);

		System.out.println("\nEncoding " + keyArray.length * 8);
		System.out.println("round[ 0].input:   " + byteArrayToString(stateArray));
		System.out.println("round[ 0].k_sch:   " + byteArrayToString(keyArray));

		addRoundKey(state, key);

		for(int i = 1; i <= rounds; i++){
			printLine(String.format("round[%2d].start:  ", i), state);
			subBytes(state); 			printLine(String.format("round[%2d].s_box:  ", i), state);
			shiftRows(state);	 		printLine(String.format("round[%2d].s_row:  ", i), state);
			if(i != rounds){
				mixColumns(state);		printLine(String.format("round[%2d].m_col:  ", i), state);
			}
			key = getKey(i, allKeys);
			addRoundKey(state, key);	printLine(String.format("round[%2d].k_sch:  ", i), key);
		}
		String finalState = printLine(String.format("round[%2d].final:  ", rounds), state);
		if(!debug){
			System.out.println(finalState);
		}
	}

	public void decode(byte[] stateArray, byte[] keyArray)
	{
		byte[][] state = makeBlock(stateArray);
		byte[][] allKeys = expandKeys(keyArray);
		int rounds = getRounds(keyArray.length);

		System.out.println("\nDecoding " + keyArray.length * 8);
		System.out.println(String.format("round[%d].iinput:  ", rounds) + byteArrayToString(stateArray));
		System.out.println(String.format("round[%d].ik_sch:  ", rounds) + byteArrayToString(keyArray));

		byte[][] key = getKey(rounds, allKeys);
		addRoundKey(state, key);

		for(int i = rounds - 1; i >= 0; i--){
			printLine(String.format("round[%2d].istart: ", i), state);
			ishiftRows(state);	 		printLine(String.format("round[%2d].is_row: ", i), state);
			isubBytes(state); 			printLine(String.format("round[%2d].is_box: ", i), state);
			key = getKey(i, allKeys);	//printLine(String.format("round[%2d].ik_sch:  ", i), key);
			addRoundKey(state, key);	printLine(String.format("round[%2d].ik_add: ", i), state);
			if(i != 0){
				imixColumns(state);		printLine(String.format("round[%2d].im_col: ", i), state);
			}
		} 
		String finalState = printLine(String.format("round[%2d].ifinal: ", 0), state);
		if(!debug){
			System.out.println(finalState);
		}
	}

	private int getRounds(int keyLen)
	{
		switch(keyLen){
		case 16: return 10;
		case 24: return 12;
		case 32: return 14;
		default: throw new IllegalArgumentException("Not a valid key length: " + keyLen);
		}
	}

	private byte[][] makeBlock(byte[] input)
	{
		byte[][] state = new byte[input.length/4][4];
		for(int i = 0; i < input.length; i++)
			state[i/4][i%4] = input[i];
		return state;
	}

	private byte[][] expandKeys(byte[] key)
	{
		int Nr = getRounds(key.length); // number of rounds
		int Nb = 4; 					// number of rows in each column (words in a block)
		int Nk = key.length / 4; 		// number of columns
		byte[] temp;
		byte[][] w = new byte[Nb * (Nr + 1)][4];

		int i = 0;
		for(;i < Nk; i++){
			byte[] nxt = {key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]};
			w[i] = nxt;
		}
		for(i = Nk; i < Nb * (Nr+1); i++){
			temp = Arrays.copyOf(w[i-1], w[i-1].length);
			if (i % Nk == 0){
				temp = rotWord(temp);
				temp = subWord(temp);
				temp[0] ^= rcon[i/Nk];
			} 
			else if (Nk > 6 && i % Nk ==4)
				temp = subWord(temp);
			for(int j = 0; j < temp.length; j++)
				w[i][j] = (byte) (w[i-Nk][j] ^ temp[j]);
		}
		return w;
	}

	private byte[][] getKey(int round, byte[][] allKeys)
	{
		byte[][] roundKey = new byte[4][4];
		int start = round * 4;
		for(int i = start; i < start + 4; i++)
			for(int j = 0; j < 4; j++)
				roundKey[i - start][j] = allKeys[i][j];
		//		System.out.println(printLine("Round Key: ", roundKey));
		return roundKey;
	}

	private byte[] rotWord(byte[] b){
		byte temp = b[0];
		for(int i = 0; i < 3; i++)
			b[i] = b[i + 1];
		b[3] = temp;
		return b;
	}

	private byte[] subWord(byte[] b)
	{
		for(int i = 0; i < b.length; i++)
			b[i] = Sbox[(b[i] & 0xF0) >> 4][b[i] & 0x0F];
		return b;
	}

	private byte[][] addRoundKey(byte[][] state, byte[][] key){
		for(int i = 0; i < state.length; i++)
			for(int j = 0; j < state[0].length; j++)
				state[i][j] ^= key[i][j];
		return state;
	}

	private byte[][] subBytes(byte[][] state)
	{
		for(int i = 0; i < state.length; i++)
			for(int j = 0; j < state[0].length; j++)
				state[i][j] = Sbox[(state[i][j] & 0xF0) >> 4][state[i][j] & 0x0F];
		return state;
	}

	private byte[][] isubBytes(byte[][] state)
	{
		for(int i = 0; i < state.length; i++)
			for(int j = 0; j < state[0].length; j++)
				state[i][j] = iSbox[(state[i][j] & 0xF0) >> 4][state[i][j] & 0x0F];
		return state;
	}

	private byte[][] shiftRows(byte[][] state){
		byte row2 = state[0][1]; //shift row 2
		for(int i = 0; i < 3; i++)
			state[i][1] = state[i + 1][1];
		state[3][1] = row2;
		byte row3a = state[0][2]; // shift row 3
		byte row3b = state[1][2];
		state[0][2] = state[2][2];
		state[1][2] = state[3][2];
		state[2][2] = row3a;
		state[3][2] = row3b;
		byte row4 = state[3][3]; // shift row 4
		for(int i = 3; i > 0; i--)
			state[i][3] = state[i - 1][3];
		state[0][3] = row4;
		return state;
	}

	private byte[][] ishiftRows(byte[][] state){
		byte row2 = state[3][1]; //shift row 2
		for(int i = 3; i > 0; i--)
			state[i][1] = state[i - 1][1];
		state[0][1] = row2;
		byte row3a = state[0][2]; // shift row 3
		byte row3b = state[1][2];
		state[0][2] = state[2][2];
		state[1][2] = state[3][2];
		state[2][2] = row3a;
		state[3][2] = row3b;
		byte row4 = state[0][3]; // shift row 4
		for(int i = 0; i < 3; i++)
			state[i][3] = state[i + 1][3];
		state[3][3] = row4;
		return state;
	}

	private byte[][] mixColumns(byte[][] state){
		byte[] hex = { 0x00, 0x01, 0x02, 0x03 };
		for(int i = 0; i < 4; i++){
			byte[] col = state[i];
			byte[] newCol = new byte[4];
			newCol[0] = (byte) (ffMult(hex[2], col[0]) ^ ffMult(hex[3], col[1]) ^ ffMult(hex[1], col[2]) ^ ffMult(hex[1], col[3]));
			newCol[1] = (byte) (ffMult(hex[1], col[0]) ^ ffMult(hex[2], col[1]) ^ ffMult(hex[3], col[2]) ^ ffMult(hex[1], col[3]));
			newCol[2] = (byte) (ffMult(hex[1], col[0]) ^ ffMult(hex[1], col[1]) ^ ffMult(hex[2], col[2]) ^ ffMult(hex[3], col[3]));
			newCol[3] = (byte) (ffMult(hex[3], col[0]) ^ ffMult(hex[1], col[1]) ^ ffMult(hex[1], col[2]) ^ ffMult(hex[2], col[3]));
			state[i] =  newCol;
		}
		return state;
	}

	private byte[][] imixColumns(byte[][] state){
		byte[] hex = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e };
		for(int i = 0; i < 4; i++){
			byte[] col = state[i];
			byte[] newCol = new byte[4];
			newCol[0] = (byte) (ffMult(hex[0x0e], col[0]) ^ ffMult(hex[0x0b], col[1]) ^ ffMult(hex[0x0d], col[2]) ^ ffMult(hex[0x09], col[3]));
			newCol[1] = (byte) (ffMult(hex[0x09], col[0]) ^ ffMult(hex[0x0e], col[1]) ^ ffMult(hex[0x0b], col[2]) ^ ffMult(hex[0x0d], col[3]));
			newCol[2] = (byte) (ffMult(hex[0x0d], col[0]) ^ ffMult(hex[0x09], col[1]) ^ ffMult(hex[0x0e], col[2]) ^ ffMult(hex[0x0b], col[3]));
			newCol[3] = (byte) (ffMult(hex[0x0b], col[0]) ^ ffMult(hex[0x0d], col[1]) ^ ffMult(hex[0x09], col[2]) ^ ffMult(hex[0x0e], col[3]));
			state[i] =  newCol;
		}
		return state;
	}

	private byte ffMult(byte val1, byte val2){
		byte temp = val2;
		byte total = 0x00;
		for(int i = 0; i < 8; i++){
			if(((val1 >> (i))& 0x01) == 0x01)
				total ^= temp;
			temp = (((temp & 0x80) == 0x80)? (byte) ((temp << 1) ^ 0x1B): (byte) (temp << 1));
		}
		return (byte)total;
	}

	public static byte[] stringToBytes(String input){
		String[] parts = input.split(" ");
		byte[] result = new byte[parts.length];
		for(int i = 0; i < parts.length; i++)
			result[i] = (byte)Integer.parseInt(parts[i], 16);
		return result;
	}

	public static String byteArrayToString(byte[] bytes){
		String result = "";
		for(int i = 0; i < bytes.length; i++){
			if(i != 0)
				result += " ";
			result += String.format("%02x", bytes[i]);
		}
		return result;
	}

	public static String printLine(byte[][] bytes){ return printLine("", bytes);}
	public static String printLine(String message, byte[][] bytes){
		String result = message + " ";
		//		String result = message + " \n";
		for(int i = 0; i < bytes.length; i++){
			for(int j = 0; j < bytes[0].length; j++)
				result += String.format("%02x", bytes[i][j]) + " ";
		}
		if(debug)
			System.out.println(result);
		return result;
	}

	public static String printBlock(byte[][] bytes){ return printBlock("", bytes);}
	public static String printBlock(String message, byte[][] bytes){
		String result = message + " \n";
		for(int j = 0; j < bytes[0].length; j++){
			for(int i = 0; i < bytes.length; i++)
				result += String.format("%02x", bytes[i][j]) + " ";
			result += "\n";
		}
		if(debug)
			System.out.println(result);
		return result;
	}
}